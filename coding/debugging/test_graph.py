import unittest
from graph import Graph

class graphTest(unittest.TestCase):
    def setUp(self):
        self.g1 = Graph([(54, 53), (56, 19), (22, 14),
            ( 0, 26), (48, 24), (15,  5), (53, 36), (22, 11),
            (30, 27), (25, 45), (10, 32), (11, 19), (31, 30),
            (52,  2), (34,  1), (50, 29), (45, 57), (10, 50),
            (29, 46), (41,  0), ( 6, 47), (23, 16), ( 3, 38),
            ( 8, 43), ( 9, 23), (46, 28), (27, 58), (44, 54),
            (13, 35), ( 1, 38), ( 1,  3), (45, 17), (56, 44),
            ( 2, 51), (50, 45), (16,  7), (49,  9), (35, 25),
            (43,  4), (46, 40), ( 7, 52), (37, 21), (39, 55),
            (20, 10), (30, 19), ( 4,  6), (12, 34), (28, 12),
            (18, 20), ( 4, 48), (58, 13), (22, 15), (24, 37),
            (21, 11), (11, 33), (57,  8), (55, 18), (26, 56),
            (51, 31), (42, 49), (59, 41), (45, 40), (38, 49),
            (47, 22), ( 3, 42), (36, 39), (43, 38)])

        self.g2 = Graph([(1, 2), (2, 3),
                (3, 4), (4, 1), (4, 5)])

        self.g3 = Graph([(5, 6), (1, 2), 
            (2, 3), (3, 1), (4, 7), (8, 7)])

        self.g4 = Graph([(26, 43), (29, 6), (48, 24), (18, 44), (41, 10), 
            (45, 4 ), (57, 30), (52, 34), ( 7, 35), (11, 8 ),
            (15, 18), (59, 32), (50, 41), (28, 46), (33, 50),
            ( 8, 14), (38, 46), ( 5, 17), (57, 47), ( 1, 13),
            ( 4, 3 ), (13, 49), (50, 20), (36, 57), (49, 36),
            (58, 56), (25, 37), (47, 55), ( 9, 15), ( 0, 27),
            (38, 28), ( 2, 16), (44, 29), (22, 38), (12, 2 ),
            ( 2, 52), (20, 12), (10, 3 ), (30, 54), (21, 36),
            (58, 39), (32, 13), (46, 30), (39, 48), (10, 47),
            (57, 25), (23, 42), (32, 11), ( 6, 7 ), (14, 5 ),
            (29, 26), (17, 51), (40, 53), ( 3, 0 ), (19, 22),
            (35, 21), (51, 45), (56, 2 ), (31, 9 ), (24, 33),
            (27, 31), ( 4, 19), (43, 1 ), (42, 58), (53, 59),
            (54, 23), (46, 3 )])

    def test_connectedness(self):
        with self.assertRaises(ValueError):
            self.g3.eccentricity(1)
        
    def test_eccentricity(self):
        self.assertEqual(12, self.g1.eccentricity(8))
        self.assertEqual(3, self.g2.eccentricity(2))

    def test_diameter(self):
        self.assertEqual(16, self.g4.diameter())
